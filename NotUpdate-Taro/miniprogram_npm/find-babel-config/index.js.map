{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nvar path = require('path');\nvar fs = require('fs');\nvar JSON5 = require('json5');\nvar pathExists = require('path-exists');\n\nvar INFINITY = 1 / 0;\nvar BABELRC_FILENAME = '.babelrc';\nvar BABELRC_JS_FILENAME = '.babelrc.js';\nvar BABEL_CONFIG_JS_FILENAME = 'babel.config.js';\nvar PACKAGE_FILENAME = 'package.json';\n\nvar nullConf = { file: null, config: null };\n\nfunction getBabelJsConfig(file) {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    var configModule = require(file);\n\n    if (typeof configModule === 'function') {\n        return configModule();\n    }\n\n    // eslint-disable-next-line no-underscore-dangle\n    return configModule && configModule.__esModule ? configModule.default : configModule;\n}\n\nfunction asyncFind(resolve, dir, depth) {\n    if (depth < 0) {\n        return resolve(nullConf);\n    }\n\n    var babelrc = path.join(dir, BABELRC_FILENAME);\n    return pathExists(babelrc).then(function (exists) {\n        if (exists) {\n            fs.readFile(babelrc, 'utf8', function (err, data) {\n                if (!err) {\n                    resolve({\n                        file: babelrc,\n                        config: JSON5.parse(data)\n                    });\n                }\n            });\n        }\n        return exists;\n    }).then(function (exists) {\n        if (!exists) {\n            var babelJSrc = path.join(dir, BABELRC_JS_FILENAME);\n            return pathExists(babelJSrc).then(function (ex) {\n                if (ex) {\n                    var config = getBabelJsConfig(babelJSrc);\n                    resolve({\n                        file: babelJSrc,\n                        config\n                    });\n                }\n            });\n        }\n        return exists;\n    }).then(function (exists) {\n        if (!exists) {\n            var packageFile = path.join(dir, PACKAGE_FILENAME);\n            return pathExists(packageFile).then(function (ex) {\n                if (ex) {\n                    fs.readFile(packageFile, 'utf8', function (err, data) {\n                        var packageJson = JSON.parse(data);\n                        if (packageJson.babel) {\n                            resolve({\n                                file: packageFile,\n                                config: packageJson.babel\n                            });\n                        }\n                    });\n                }\n            });\n        }\n        return exists;\n    }).then(function (exists) {\n        if (!exists) {\n            var babelConfigJSrc = path.join(dir, BABEL_CONFIG_JS_FILENAME);\n            return pathExists(babelConfigJSrc).then(function (ex) {\n                if (ex) {\n                    var config = getBabelJsConfig(babelConfigJSrc);\n                    resolve({\n                        file: babelConfigJSrc,\n                        config\n                    });\n                }\n            });\n        }\n        return exists;\n    }).then(function (exists) {\n        if (!exists) {\n            var nextDir = path.dirname(dir);\n            if (nextDir === dir) {\n                resolve(nullConf);\n            } else {\n                asyncFind(resolve, nextDir, depth - 1);\n            }\n        }\n    });\n}\n\nmodule.exports = function findBabelConfig(start) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INFINITY;\n\n    if (!start) {\n        return new Promise(function (resolve) {\n            return resolve(nullConf);\n        });\n    }\n\n    var dir = path.isAbsolute(start) ? start : path.join(process.cwd(), start);\n\n    return new Promise(function (resolve) {\n        asyncFind(resolve, dir, depth);\n    });\n};\n\nmodule.exports.sync = function findBabelConfigSync(start) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INFINITY;\n\n    if (!start) {\n        return nullConf;\n    }\n\n    var dir = path.isAbsolute(start) ? start : path.join(process.cwd(), start);\n    var loopLeft = depth;\n\n    // eslint-disable-next-line no-cond-assign\n    do {\n        var babelrc = path.join(dir, BABELRC_FILENAME);\n        if (pathExists.sync(babelrc)) {\n            var babelrcContent = fs.readFileSync(babelrc, 'utf8');\n            return {\n                file: babelrc,\n                config: JSON5.parse(babelrcContent)\n            };\n        }\n\n        var babelJSrc = path.join(dir, BABELRC_JS_FILENAME);\n        if (pathExists.sync(babelJSrc)) {\n            var config = getBabelJsConfig(babelJSrc);\n            return {\n                file: babelJSrc,\n                config\n            };\n        }\n\n        var babelConfigJSrc = path.join(dir, BABEL_CONFIG_JS_FILENAME);\n        if (pathExists.sync(babelConfigJSrc)) {\n            var _config = getBabelJsConfig(babelConfigJSrc);\n            return {\n                file: babelConfigJSrc,\n                config: _config\n            };\n        }\n\n        var packageFile = path.join(dir, PACKAGE_FILENAME);\n        if (pathExists.sync(packageFile)) {\n            var packageContent = fs.readFileSync(packageFile, 'utf8');\n            var packageJson = JSON.parse(packageContent);\n            if (packageJson.babel) {\n                return {\n                    file: packageFile,\n                    config: packageJson.babel\n                };\n            }\n        }\n\n        if (loopLeft === 0) {\n            return nullConf;\n        }\n\n        loopLeft -= 1;\n    } while (dir !== (dir = path.dirname(dir)));\n\n    return nullConf;\n};"]}