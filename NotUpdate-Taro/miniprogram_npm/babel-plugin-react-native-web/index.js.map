{"version":3,"sources":["index.js","src/index.js","src/moduleMap.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;;ACDA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = require('./src');\n","const moduleMap = require('./moduleMap');\n\nconst isCommonJS = opts => opts.commonjs === true;\n\nconst getDistLocation = (importName, opts) => {\n  const format = isCommonJS(opts) ? 'cjs/' : '';\n  if (importName === 'index') {\n    return `react-native-web/dist/${format}index`;\n  } else if (importName && moduleMap[importName]) {\n    return `react-native-web/dist/${format}exports/${importName}`;\n  }\n};\n\nconst isReactNativeRequire = (t, node) => {\n  const { declarations } = node;\n  if (declarations.length > 1) {\n    return false;\n  }\n  const { id, init } = declarations[0];\n  return (\n    (t.isObjectPattern(id) || t.isIdentifier(id)) &&\n    t.isCallExpression(init) &&\n    t.isIdentifier(init.callee) &&\n    init.callee.name === 'require' &&\n    init.arguments.length === 1 &&\n    (init.arguments[0].value === 'react-native' || init.arguments[0].value === 'react-native-web')\n  );\n};\n\nconst isReactNativeModule = ({ source, specifiers }) =>\n  source &&\n  (source.value === 'react-native' || source.value === 'react-native-web') &&\n  specifiers.length;\n\nmodule.exports = function({ types: t }) {\n  return {\n    name: 'Rewrite react-native to react-native-web',\n    visitor: {\n      ImportDeclaration(path, state) {\n        const { specifiers } = path.node;\n        if (isReactNativeModule(path.node)) {\n          const imports = specifiers\n            .map(specifier => {\n              if (t.isImportSpecifier(specifier)) {\n                const importName = specifier.imported.name;\n                const distLocation = getDistLocation(importName, state.opts);\n\n                if (distLocation) {\n                  return t.importDeclaration(\n                    [t.importDefaultSpecifier(t.identifier(specifier.local.name))],\n                    t.stringLiteral(distLocation)\n                  );\n                }\n              }\n              return t.importDeclaration(\n                [specifier],\n                t.stringLiteral(getDistLocation('index', state.opts))\n              );\n            })\n            .filter(Boolean);\n\n          path.replaceWithMultiple(imports);\n        }\n      },\n      ExportNamedDeclaration(path, state) {\n        const { specifiers } = path.node;\n        if (isReactNativeModule(path.node)) {\n          const exports = specifiers\n            .map(specifier => {\n              if (t.isExportSpecifier(specifier)) {\n                const exportName = specifier.exported.name;\n                const localName = specifier.local.name;\n                const distLocation = getDistLocation(localName, state.opts);\n\n                if (distLocation) {\n                  return t.exportNamedDeclaration(\n                    null,\n                    [t.exportSpecifier(t.identifier('default'), t.identifier(exportName))],\n                    t.stringLiteral(distLocation)\n                  );\n                }\n              }\n              return t.exportNamedDeclaration(\n                null,\n                [specifier],\n                t.stringLiteral(getDistLocation('index', state.opts))\n              );\n            })\n            .filter(Boolean);\n\n          path.replaceWithMultiple(exports);\n        }\n      },\n      VariableDeclaration(path, state) {\n        if (isReactNativeRequire(t, path.node)) {\n          const { id } = path.node.declarations[0];\n          if (t.isObjectPattern(id)) {\n            const imports = id.properties\n              .map(identifier => {\n                const distLocation = getDistLocation(identifier.key.name, state.opts);\n                if (distLocation) {\n                  return t.variableDeclaration(path.node.kind, [\n                    t.variableDeclarator(\n                      t.identifier(identifier.value.name),\n                      t.memberExpression(\n                        t.callExpression(t.identifier('require'), [t.stringLiteral(distLocation)]),\n                        t.identifier('default')\n                      )\n                    )\n                  ]);\n                }\n              })\n              .filter(Boolean);\n\n            path.replaceWithMultiple(imports);\n          } else if (t.isIdentifier(id)) {\n            const name = id.name;\n            const importIndex = t.variableDeclaration(path.node.kind, [\n              t.variableDeclarator(\n                t.identifier(name),\n                t.callExpression(t.identifier('require'), [\n                  t.stringLiteral(getDistLocation('index', state.opts))\n                ])\n              )\n            ]);\n\n            path.replaceWith(importIndex);\n          }\n        }\n      }\n    }\n  };\n};\n","// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\nmodule.exports = {\n  AccessibilityInfo: true,\n  ActionSheetIOS: true,\n  ActivityIndicator: true,\n  Alert: true,\n  AlertIOS: true,\n  Animated: true,\n  AppRegistry: true,\n  AppState: true,\n  AsyncStorage: true,\n  BackHandler: true,\n  Button: true,\n  CameraRoll: true,\n  CheckBox: true,\n  Clipboard: true,\n  ColorPropType: true,\n  DatePickerAndroid: true,\n  DatePickerIOS: true,\n  DeviceEventEmitter: true,\n  DeviceInfo: true,\n  Dimensions: true,\n  DrawerLayoutAndroid: true,\n  Easing: true,\n  EdgeInsetsPropType: true,\n  FlatList: true,\n  I18nManager: true,\n  Image: true,\n  ImageBackground: true,\n  ImageEditor: true,\n  ImagePickerIOS: true,\n  ImageStore: true,\n  InputAccessoryView: true,\n  InteractionManager: true,\n  Keyboard: true,\n  KeyboardAvoidingView: true,\n  LayoutAnimation: true,\n  Linking: true,\n  ListView: true,\n  MaskedViewIOS: true,\n  Modal: true,\n  NativeEventEmitter: true,\n  NativeModules: true,\n  NavigatorIOS: true,\n  NetInfo: true,\n  PanResponder: true,\n  PermissionsAndroid: true,\n  Picker: true,\n  PickerIOS: true,\n  PixelRatio: true,\n  Platform: true,\n  PointPropType: true,\n  ProgressBar: true,\n  ProgressBarAndroid: true,\n  ProgressViewIOS: true,\n  PushNotificationIOS: true,\n  RefreshControl: true,\n  SafeAreaView: true,\n  ScrollView: true,\n  SectionList: true,\n  SegmentedControlIOS: true,\n  Settings: true,\n  Share: true,\n  Slider: true,\n  SnapshotViewIOS: true,\n  StatusBar: true,\n  StatusBarIOS: true,\n  StyleSheet: true,\n  SwipeableFlatList: true,\n  SwipeableListView: true,\n  Switch: true,\n  Systrace: true,\n  TVEventHandler: true,\n  TabBarIOS: true,\n  Text: true,\n  TextInput: true,\n  TextPropTypes: true,\n  TimePickerAndroid: true,\n  ToastAndroid: true,\n  ToolbarAndroid: true,\n  Touchable: true,\n  TouchableHighlight: true,\n  TouchableNativeFeedback: true,\n  TouchableOpacity: true,\n  TouchableWithoutFeedback: true,\n  UIManager: true,\n  Vibration: true,\n  VibrationIOS: true,\n  View: true,\n  ViewPagerAndroid: true,\n  ViewPropTypes: true,\n  VirtualizedList: true,\n  WebView: true,\n  YellowBox: true,\n  createElement: true,\n  findNodeHandle: true,\n  processColor: true,\n  render: true,\n  unmountComponentAtNode: true\n};\n"]}