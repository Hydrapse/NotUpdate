{"version":3,"sources":["index.js","AdapterProxy.js","deprecate.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('./AdapterProxy');Object.keys(__TEMP__).forEach(function(k) { if (k === \"default\" || k === \"__esModule\") return; Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP__[k]; } }); });\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('./deprecate');Object.defineProperty(exports, 'deprecate', { enumerable: true, configurable: true, get: function() { return __TEMP__.default; } });\n//# sourceMappingURL=index.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('@unimodules/react-native-adapter');Object.keys(__TEMP__).forEach(function(k) { if (k === \"default\" || k === \"__esModule\") return; Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP__[k]; } }); });\n//# sourceMappingURL=AdapterProxy.js.map","var __TEMP__ = require('compare-versions');var compareVersions = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('@unimodules/react-native-adapter');var CodedError = __TEMP__['CodedError'];\nconst postedWarnings = {};\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = function deprecate(library, deprecatedAPI, options = {}) {\n    const { currentVersion, versionToRemove, replacement } = options;\n    const code = codeFromLibrary(library);\n    const key = `${code}:${deprecatedAPI}:${replacement}`;\n    if (!postedWarnings[key]) {\n        postedWarnings[key] = true;\n    }\n    if (!currentVersion ||\n        !versionToRemove ||\n        compareVersions(currentVersion, versionToRemove) >= 0) {\n        let message = `\\`${deprecatedAPI}\\` has been removed`;\n        if (versionToRemove) {\n            message = `${message} as of version \"${versionToRemove}\"`;\n        }\n        if (replacement && replacement.length) {\n            message = `${message} please migrate to: \\`${replacement}\\``;\n        }\n        throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n    }\n    let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n    if (replacement && replacement.length) {\n        message = `${message} in favor of \\`${replacement}\\``;\n    }\n    if (versionToRemove && versionToRemove.length) {\n        message = `${message} and will be removed in version \"${versionToRemove}\"`;\n    }\n    console.warn(prependLibrary(library, message));\n};\nfunction prependLibrary(library, message) {\n    return `${library}: ${message}`;\n}\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library) {\n    const code = library.replace(/[-\\.]/g, '_').toUpperCase();\n    return code;\n}\n//# sourceMappingURL=deprecate.js.map"]}