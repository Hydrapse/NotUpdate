{"version":3,"sources":["index.js","EventEmitter.js","NativeModulesProxy.js","SyntheticPlatformEmitter.js","errors/CodedError.js","errors/UnavailabilityError.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,AHSA;ACFA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,AENA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA,AGTA;AJaA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('react-native');var ReactNativePlatform = __TEMP__['Platform'];\nvar __TEMP__ = require('./EventEmitter');var EventEmitter = __TEMP__['EventEmitter'];\nvar __TEMP__ = require('./NativeModulesProxy');var NativeModulesProxy = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./NativeViewManagerAdapter');var requireNativeViewManager = __TEMP__['requireNativeViewManager'];\nvar __TEMP__ = require('./SyntheticPlatformEmitter');var SyntheticPlatformEmitter = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./errors/CodedError');var CodedError = __TEMP__['CodedError'];\nvar __TEMP__ = require('./errors/UnavailabilityError');var UnavailabilityError = __TEMP__['UnavailabilityError'];\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var Platform = exports.Platform = {\n    OS: ReactNativePlatform.OS,\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'EventEmitter', { enumerable: true, configurable: true, get: function() { return EventEmitter; } });Object.defineProperty(exports, 'NativeModulesProxy', { enumerable: true, configurable: true, get: function() { return NativeModulesProxy; } });Object.defineProperty(exports, 'SyntheticPlatformEmitter', { enumerable: true, configurable: true, get: function() { return SyntheticPlatformEmitter; } });Object.defineProperty(exports, 'requireNativeViewManager', { enumerable: true, configurable: true, get: function() { return requireNativeViewManager; } });Object.defineProperty(exports, 'CodedError', { enumerable: true, configurable: true, get: function() { return CodedError; } });Object.defineProperty(exports, 'UnavailabilityError', { enumerable: true, configurable: true, get: function() { return UnavailabilityError; } });\n//# sourceMappingURL=index.js.map","var __TEMP__ = require('invariant');var invariant = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('react-native');var NativeEventEmitter = __TEMP__['NativeEventEmitter'];var Platform = __TEMP__['Platform'];\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.EventEmitter = class EventEmitter {\n    constructor(nativeModule) {\n        this._listenerCount = 0;\n        this._nativeModule = nativeModule;\n        this._eventEmitter = new NativeEventEmitter(nativeModule);\n    }\n    addListener(eventName, listener) {\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n            this._nativeModule.startObserving();\n        }\n        this._listenerCount++;\n        const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n        const subscription = {\n            [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n            remove: () => {\n                this.removeSubscription(subscription);\n            },\n        };\n        return subscription;\n    }\n    removeAllListeners(eventName) {\n        const removedListenerCount = this._eventEmitter.listeners(eventName).length;\n        this._eventEmitter.removeAllListeners(eventName);\n        this._listenerCount -= removedListenerCount;\n        invariant(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n            this._nativeModule.stopObserving();\n        }\n    }\n    removeSubscription(subscription) {\n        const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n        if (!nativeEmitterSubscription) {\n            return;\n        }\n        this._eventEmitter.removeSubscription(nativeEmitterSubscription);\n        this._listenerCount--;\n        // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n        // called again with the same subscription\n        delete subscription[nativeEmitterSubscriptionKey];\n        // Release closed-over references to the emitter\n        subscription.remove = () => { };\n        if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n            this._nativeModule.stopObserving();\n        }\n    }\n    emit(eventName, ...params) {\n        this._eventEmitter.emit(eventName, ...params);\n    }\n};\n//# sourceMappingURL=EventEmitter.js.map","var __TEMP__ = require('react-native');var NativeModules = __TEMP__['NativeModules'];\nconst NativeProxy = NativeModules.NativeUnimoduleProxy;\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\nconst NativeModulesProxy = {};\nif (NativeProxy) {\n    Object.keys(NativeProxy[exportedMethodsKey]).forEach(moduleName => {\n        NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n        NativeProxy[exportedMethodsKey][moduleName].forEach(methodInfo => {\n            NativeModulesProxy[moduleName][methodInfo.name] = async (...args) => {\n                const { key, argumentsCount } = methodInfo;\n                if (argumentsCount !== args.length) {\n                    throw new Error(`Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${argumentsCount === 1 ? 'argument' : 'arguments'} but received ${args.length}`);\n                }\n                return await NativeProxy.callMethod(moduleName, key, args);\n            };\n        });\n        // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n        // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n        //\n        // On Android only {start,stop}Observing are called on the native module\n        // and these should be exported as Expo methods.\n        NativeModulesProxy[moduleName].addListener = (...args) => NativeModules.UMReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n        NativeModulesProxy[moduleName].removeListeners = (...args) => NativeModules.UMReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n    });\n}\nelse {\n    console.warn(`The \"UMNativeModulesProxy\" native module is not exported through NativeModules; verify that @unimodules/react-native-adapter's native code is linked properly`);\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = NativeModulesProxy;\n//# sourceMappingURL=NativeModulesProxy.js.map","var __TEMP__ = require('react-native/Libraries/vendor/emitter/EventEmitter');var EventEmitter = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('react-native/Libraries/EventEmitter/RCTDeviceEventEmitter');var RCTDeviceEventEmitter = __REQUIRE_DEFAULT__(__TEMP__);\n/**\n * This emitter is used for sending synthetic native events to listeners\n * registered in the API layer with `NativeEventEmitter`.\n */\nclass SyntheticPlatformEmitter {\n    constructor() {\n        this._emitter = new EventEmitter(RCTDeviceEventEmitter.sharedSubscriber);\n    }\n    emit(eventName, props) {\n        this._emitter.emit(eventName, props);\n    }\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = new SyntheticPlatformEmitter();\n//# sourceMappingURL=SyntheticPlatformEmitter.js.map","/**\n * A general error class that should be used for all errors in Expo modules.\n * Guarantees a `code` field that can be used to differentiate between different\n * types of errors without further subclassing Error.\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.CodedError = class CodedError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n    }\n};\n//# sourceMappingURL=CodedError.js.map","var __TEMP__ = require('../index');var Platform = __TEMP__['Platform'];\nvar __TEMP__ = require('./CodedError');var CodedError = __TEMP__['CodedError'];\n/**\n * A class for errors to be thrown when a property is accessed which is\n * unavailable, unsupported, or not currently implemented on the running\n * platform.\n */\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.UnavailabilityError = class UnavailabilityError extends CodedError {\n    constructor(moduleName, propertyName) {\n        super('ERR_UNAVAILABLE', `The method or property ${moduleName}.${propertyName} is not available on ${Platform.OS}, are you sure you've linked all the native dependencies properly?`);\n    }\n};\n//# sourceMappingURL=UnavailabilityError.js.map"]}