{"version":3,"sources":["index.js","FileSystem.js","ExponentFileSystem.js","ExponentFileSystemShim.js","FileSystem.types.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ADGA,ADGA;AELA,ACHA,AFMA,ADGA;AELA,ACHA,AFMA,ADGA;AELA,ACHA,AFMA,ADGA;AELA,ACHA,AFMA,AGTA,AJYA;AELA,ACHA,AFMA,AGTA,AJYA;AELA,ACHA,AFMA,AGTA,AJYA;AELA,ACHA,AFMA,AGTA,AJYA;AELA,ACHA,AFMA,AGTA;ADIA,AFMA,AGTA;ADIA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AELA,AFMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('./FileSystem');var FileSystem = __REQUIRE_WILDCARD__(__TEMP__);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var __TEMP__ = require('./FileSystem');Object.keys(__TEMP__).forEach(function(k) { if (k === \"default\" || k === \"__esModule\") return; Object.defineProperty(exports, k, { enumerable: true, configurable: true, get: function() { return __TEMP__[k]; } }); });\nif (module && module.exports) {\n    let wasImportWarningShown = false;\n    // @ts-ignore: Temporarily define an export named \"FileSystem\" for legacy compatibility\n    Object.defineProperty(module.exports, 'FileSystem', {\n        get() {\n            if (!wasImportWarningShown) {\n                console.warn(`The syntax \"import { FileSystem } from 'expo-file-system'\" is deprecated. Use \"import * as FileSystem from 'expo-file-system'\" or import named exports instead. Support for the old syntax will be removed in SDK 34.`);\n                wasImportWarningShown = true;\n            }\n            return FileSystem;\n        },\n    });\n}\n//# sourceMappingURL=index.js.map","var __TEMP__ = require('@unimodules/core');var UnavailabilityError = __TEMP__['UnavailabilityError'];\nvar __TEMP__ = require('@unimodules/core');var EventEmitter = __TEMP__['EventEmitter'];\nvar __TEMP__ = require('uuid-js');var UUID = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./ExponentFileSystem');var ExponentFileSystem = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('react-native');var Platform = __TEMP__['Platform'];\nvar __TEMP__ = require('./FileSystem.types');var EncodingType = __TEMP__['EncodingType'];\nif (!ExponentFileSystem) {\n    console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, 'EncodingType', { enumerable: true, configurable: true, get: function() { return EncodingType; } });\nfunction normalizeEndingSlash(p) {\n    if (p != null) {\n        return p.replace(/\\/*$/, '') + '/';\n    }\n    return null;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var documentDirectory = exports.documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var cacheDirectory = exports.cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getInfoAsync = async function getInfoAsync(fileUri, options = {}) {\n    if (!ExponentFileSystem.getInfoAsync) {\n        throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n    }\n    return await ExponentFileSystem.getInfoAsync(fileUri, options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.readAsStringAsync = async function readAsStringAsync(fileUri, options) {\n    if (!ExponentFileSystem.readAsStringAsync) {\n        throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n    }\n    return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getContentUriAsync = async function getContentUriAsync(fileUri) {\n    if (Platform.OS === 'android') {\n        if (!ExponentFileSystem.getContentUriAsync) {\n            throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n        }\n        return await ExponentFileSystem.getContentUriAsync(fileUri);\n    }\n    else {\n        return new Promise(function (resolve, reject) {\n            resolve(fileUri);\n        });\n    }\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.writeAsStringAsync = async function writeAsStringAsync(fileUri, contents, options = {}) {\n    if (!ExponentFileSystem.writeAsStringAsync) {\n        throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n    }\n    return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.deleteAsync = async function deleteAsync(fileUri, options = {}) {\n    if (!ExponentFileSystem.deleteAsync) {\n        throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n    }\n    return await ExponentFileSystem.deleteAsync(fileUri, options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.moveAsync = async function moveAsync(options) {\n    if (!ExponentFileSystem.moveAsync) {\n        throw new UnavailabilityError('expo-file-system', 'moveAsync');\n    }\n    return await ExponentFileSystem.moveAsync(options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.copyAsync = async function copyAsync(options) {\n    if (!ExponentFileSystem.copyAsync) {\n        throw new UnavailabilityError('expo-file-system', 'copyAsync');\n    }\n    return await ExponentFileSystem.copyAsync(options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.makeDirectoryAsync = async function makeDirectoryAsync(fileUri, options = {}) {\n    if (!ExponentFileSystem.makeDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n    }\n    return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.readDirectoryAsync = async function readDirectoryAsync(fileUri) {\n    if (!ExponentFileSystem.readDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n    }\n    return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getFreeDiskStorageAsync = async function getFreeDiskStorageAsync() {\n    if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n        throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n    }\n    return await ExponentFileSystem.getFreeDiskStorageAsync();\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getTotalDiskCapacityAsync = async function getTotalDiskCapacityAsync() {\n    if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n        throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n    }\n    return await ExponentFileSystem.getTotalDiskCapacityAsync();\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.downloadAsync = async function downloadAsync(uri, fileUri, options = {}) {\n    if (!ExponentFileSystem.downloadAsync) {\n        throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n    }\n    return await ExponentFileSystem.downloadAsync(uri, fileUri, options);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.createDownloadResumable = function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n    return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.DownloadResumable = class DownloadResumable {\n    constructor(url, fileUri, options = {}, callback, resumeData) {\n        this._uuid = UUID.create(4).toString();\n        this._url = url;\n        this._fileUri = fileUri;\n        this._options = options;\n        this._resumeData = resumeData;\n        this._callback = callback;\n        this._subscription = null;\n        this._emitter = new EventEmitter(ExponentFileSystem);\n    }\n    async downloadAsync() {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n            throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n        this._addSubscription();\n        return await ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData);\n    }\n    async pauseAsync() {\n        if (!ExponentFileSystem.downloadResumablePauseAsync) {\n            throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n        }\n        const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this._uuid);\n        this._removeSubscription();\n        if (pauseResult) {\n            this._resumeData = pauseResult.resumeData;\n            return this.savable();\n        }\n        else {\n            throw new Error('Unable to generate a savable pause state');\n        }\n    }\n    async resumeAsync() {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n            throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n        this._addSubscription();\n        return await ExponentFileSystem.downloadResumableStartAsync(this._url, this._fileUri, this._uuid, this._options, this._resumeData);\n    }\n    savable() {\n        return {\n            url: this._url,\n            fileUri: this._fileUri,\n            options: this._options,\n            resumeData: this._resumeData,\n        };\n    }\n    _addSubscription() {\n        if (this._subscription) {\n            return;\n        }\n        this._subscription = this._emitter.addListener('Exponent.downloadProgress', (event) => {\n            if (event.uuid === this._uuid) {\n                const callback = this._callback;\n                if (callback) {\n                    callback(event.data);\n                }\n            }\n        });\n    }\n    _removeSubscription() {\n        if (!this._subscription) {\n            return;\n        }\n        this._emitter.removeSubscription(this._subscription);\n        this._subscription = null;\n    }\n};\n//# sourceMappingURL=FileSystem.js.map","var __TEMP__ = require('@unimodules/core');var NativeModulesProxy = __TEMP__['NativeModulesProxy'];\nvar __TEMP__ = require('./ExponentFileSystemShim');var ExponentFileSystemShim = __REQUIRE_DEFAULT__(__TEMP__);\nlet platformModule;\nif (NativeModulesProxy.ExponentFileSystem) {\n    platformModule = NativeModulesProxy.ExponentFileSystem;\n}\nelse {\n    platformModule = ExponentFileSystemShim;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = platformModule;\n//# sourceMappingURL=ExponentFileSystem.js.map","const platformModule = {\n    get name() {\n        return 'ExponentFileSystem';\n    },\n    get documentDirectory() {\n        return null;\n    },\n    get cacheDirectory() {\n        return null;\n    },\n    get bundledAssets() {\n        return null;\n    },\n    get bundleDirectory() {\n        return null;\n    },\n    addListener(eventName) { },\n    removeListeners(count) { },\n};\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = platformModule;\n//# sourceMappingURL=ExponentFileSystemShim.js.map","if (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });var EncodingType = exports.EncodingType = undefined;\n(function (EncodingType) {\n    EncodingType[\"UTF8\"] = \"utf8\";\n    EncodingType[\"Base64\"] = \"base64\";\n})(EncodingType || (EncodingType = {}));\n//# sourceMappingURL=FileSystem.types.js.map"]}