{"version":3,"sources":["index.js","transform-classic.js","transform-automatic.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _transformClassic = _interopRequireDefault(require(\"./transform-classic\"));\n\nvar _transformAutomatic = _interopRequireDefault(require(\"./transform-automatic\"));\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  const {\n    runtime = \"classic\"\n  } = options;\n\n  if (runtime === \"classic\") {\n    return (0, _transformClassic.default)(api, options);\n  } else {\n    return (0, _transformAutomatic.default)(api, options);\n  }\n});\n\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxJsx = _interopRequireDefault(require(\"@babel/plugin-syntax-jsx\"));\n\nvar _helperBuilderReactJsx = _interopRequireDefault(require(\"@babel/helper-builder-react-jsx\"));\n\nvar _core = require(\"@babel/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst DEFAULT = {\n  pragma: \"React.createElement\",\n  pragmaFrag: \"React.Fragment\"\n};\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  const THROW_IF_NAMESPACE = options.throwIfNamespace === undefined ? true : !!options.throwIfNamespace;\n  const PRAGMA_DEFAULT = options.pragma || DEFAULT.pragma;\n  const PRAGMA_FRAG_DEFAULT = options.pragmaFrag || DEFAULT.pragmaFrag;\n  const PURE_ANNOTATION = options.pure;\n  const JSX_ANNOTATION_REGEX = /\\*?\\s*@jsx\\s+([^\\s]+)/;\n  const JSX_FRAG_ANNOTATION_REGEX = /\\*?\\s*@jsxFrag\\s+([^\\s]+)/;\n\n  const createIdentifierParser = id => () => {\n    return id.split(\".\").map(name => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));\n  };\n\n  const visitor = (0, _helperBuilderReactJsx.default)({\n    pre(state) {\n      const tagName = state.tagName;\n      const args = state.args;\n\n      if (_core.types.react.isCompatTag(tagName)) {\n        args.push(_core.types.stringLiteral(tagName));\n      } else {\n        args.push(state.tagExpr);\n      }\n    },\n\n    post(state, pass) {\n      state.callee = pass.get(\"jsxIdentifier\")();\n      state.pure = PURE_ANNOTATION != null ? PURE_ANNOTATION : pass.get(\"pragma\") === DEFAULT.pragma;\n    },\n\n    throwIfNamespace: THROW_IF_NAMESPACE\n  });\n  visitor.Program = {\n    enter(path, state) {\n      const {\n        file\n      } = state;\n      let pragma = PRAGMA_DEFAULT;\n      let pragmaFrag = PRAGMA_FRAG_DEFAULT;\n      let pragmaSet = !!options.pragma;\n      let pragmaFragSet = !!options.pragma;\n\n      if (file.ast.comments) {\n        for (const comment of file.ast.comments) {\n          const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);\n\n          if (jsxMatches) {\n            pragma = jsxMatches[1];\n            pragmaSet = true;\n          }\n\n          const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);\n\n          if (jsxFragMatches) {\n            pragmaFrag = jsxFragMatches[1];\n            pragmaFragSet = true;\n          }\n        }\n      }\n\n      state.set(\"jsxIdentifier\", createIdentifierParser(pragma));\n      state.set(\"jsxFragIdentifier\", createIdentifierParser(pragmaFrag));\n      state.set(\"usedFragment\", false);\n      state.set(\"pragma\", pragma);\n      state.set(\"pragmaSet\", pragmaSet);\n      state.set(\"pragmaFragSet\", pragmaFragSet);\n    },\n\n    exit(path, state) {\n      if (state.get(\"pragmaSet\") && state.get(\"usedFragment\") && !state.get(\"pragmaFragSet\")) {\n        throw new Error(\"transform-react-jsx: pragma has been set but \" + \"pragmaFrag has not been set\");\n      }\n    }\n\n  };\n\n  visitor.JSXAttribute = function (path) {\n    if (_core.types.isJSXElement(path.node.value)) {\n      path.node.value = _core.types.jsxExpressionContainer(path.node.value);\n    }\n  };\n\n  return {\n    name: \"transform-react-jsx\",\n    inherits: _pluginSyntaxJsx.default,\n    visitor\n  };\n});\n\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _pluginSyntaxJsx = _interopRequireDefault(require(\"@babel/plugin-syntax-jsx\"));\n\nvar _helperBuilderReactJsxExperimental = require(\"@babel/helper-builder-react-jsx-experimental\");\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  const PURE_ANNOTATION = options.pure;\n  const visitor = (0, _helperBuilderReactJsxExperimental.helper)(api, Object.assign({\n    pre(state) {\n      const tagName = state.tagName;\n      const args = state.args;\n\n      if (_core.types.react.isCompatTag(tagName)) {\n        args.push(_core.types.stringLiteral(tagName));\n      } else {\n        args.push(state.tagExpr);\n      }\n    },\n\n    post(state, pass) {\n      if (pass.get(\"@babel/plugin-react-jsx/runtime\") === \"classic\") {\n        state.createElementCallee = pass.get(\"@babel/plugin-react-jsx/createElementIdentifier\")();\n        state.pure = PURE_ANNOTATION != null ? PURE_ANNOTATION : !pass.get(\"@babel/plugin-react-jsx/pragmaSet\");\n      } else {\n        state.jsxCallee = pass.get(\"@babel/plugin-react-jsx/jsxIdentifier\")();\n        state.jsxStaticCallee = pass.get(\"@babel/plugin-react-jsx/jsxStaticIdentifier\")();\n        state.createElementCallee = pass.get(\"@babel/plugin-react-jsx/createElementIdentifier\")();\n        state.pure = PURE_ANNOTATION != null ? PURE_ANNOTATION : !pass.get(\"@babel/plugin-react-jsx/importSourceSet\");\n      }\n    }\n\n  }, options, {\n    development: false\n  }));\n  return {\n    name: \"transform-react-jsx\",\n    inherits: _pluginSyntaxJsx.default,\n    visitor\n  };\n});\n\nexports.default = _default;"]}