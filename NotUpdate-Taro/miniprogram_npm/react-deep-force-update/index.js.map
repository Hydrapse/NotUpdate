{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nexports.__esModule = true;\nexports['default'] = getForceUpdate;\nfunction traverseRenderedChildren(internalInstance, callback, argument) {\n  callback(internalInstance, argument);\n\n  if (internalInstance._renderedComponent) {\n    traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);\n  } else {\n    for (var key in internalInstance._renderedChildren) {\n      if (internalInstance._renderedChildren.hasOwnProperty(key)) {\n        traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);\n      }\n    }\n  }\n}\n\nfunction setPendingForceUpdate(internalInstance) {\n  if (internalInstance._pendingForceUpdate === false) {\n    internalInstance._pendingForceUpdate = true;\n  }\n}\n\nfunction forceUpdateIfPending(internalInstance, React) {\n  if (internalInstance._pendingForceUpdate === true) {\n    var publicInstance = internalInstance._instance;\n    React.Component.prototype.forceUpdate.call(publicInstance);\n  }\n}\n\nfunction deepForceUpdateStack(instance, React) {\n  var internalInstance = instance._reactInternalInstance;\n  traverseRenderedChildren(internalInstance, setPendingForceUpdate);\n  traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);\n}\n\nfunction deepForceUpdate(instance, React) {\n  var root = instance._reactInternalFiber || instance._reactInternalInstance;\n  if (typeof root.tag !== 'number') {\n    // Traverse stack-based React tree.\n    return deepForceUpdateStack(instance, React);\n  }\n\n  var node = root;\n  while (true) {\n    if (node.stateNode !== null && typeof node.type === 'function') {\n      var publicInstance = node.stateNode;\n      var updater = publicInstance.updater;\n\n      if (typeof publicInstance.forceUpdate === 'function') {\n        publicInstance.forceUpdate();\n      } else if (updater && typeof updater.enqueueForceUpdate === 'function') {\n        updater.enqueueForceUpdate(publicInstance);\n      }\n    }\n    if (node.child) {\n      node.child['return'] = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return undefined;\n    }\n    while (!node.sibling) {\n      if (!node['return'] || node['return'] === root) {\n        return undefined;\n      }\n      node = node['return'];\n    }\n    node.sibling['return'] = node['return'];\n    node = node.sibling;\n  }\n}\n\nfunction getForceUpdate(React) {\n  return function (instance) {\n    deepForceUpdate(instance, React);\n  };\n}\n\nmodule.exports = exports['default'];"]}